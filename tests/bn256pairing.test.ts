import { expect } from 'chai'
import {
    BN256Pairing,
    BN256,
    FQ2,
    FQ12,
    CurvePoint,
    TwistPoint,
    LineFuncRes,
} from '../src/ec/bn256'
import { method, assert, SmartContract } from 'scrypt-ts'

class BN256PairingTest extends SmartContract {
    @method()
    public lineFuncAdd(
        r: TwistPoint,
        p: TwistPoint,
        q: CurvePoint,
        r2: FQ2,
        res: LineFuncRes
    ) {
        assert(
            BN256Pairing.compareLineFuncRes(
                BN256Pairing.modLineFuncRes(
                    BN256Pairing.lineFuncAdd(r, p, q, r2)
                ),
                BN256Pairing.modLineFuncRes(res)
            )
        )
    }

    @method()
    public lineFuncDouble(r: TwistPoint, q: CurvePoint, res: LineFuncRes) {
        assert(
            BN256Pairing.compareLineFuncRes(
                BN256Pairing.modLineFuncRes(BN256Pairing.lineFuncDouble(r, q)),
                BN256Pairing.modLineFuncRes(res)
            )
        )
    }

    @method()
    public mulLine(ret: FQ12, a: FQ2, b: FQ2, c: FQ2, res: FQ12) {
        assert(
            BN256.compareFQ12(
                BN256.modFQ12(BN256Pairing.mulLine(ret, a, b, c)),
                BN256.modFQ12(res)
            )
        )
    }

    @method()
    public miller(a: TwistPoint, b: CurvePoint, res: FQ12) {
        assert(BN256.compareFQ12(BN256Pairing.miller(a, b), res))
    }

    @method()
    public finalExp(a: FQ12, res: FQ12) {
        assert(BN256.compareFQ12(BN256Pairing.finalExponentiation(a), res))
    }

    @method()
    public pair(g1: CurvePoint, g2: TwistPoint, res: FQ12) {
        assert(BN256.compareFQ12(BN256Pairing._pair(g1, g2), res))
    }
}

describe('Heavy: Test BN256 pairing', () => {
    let bn256pairingTest = undefined

    before(async () => {
        await BN256PairingTest.compile()
        bn256pairingTest = new BN256PairingTest()
    })

    it('should pass lineFuncAdd', () => {
        const r: TwistPoint = {
            x: {
                x: 17356672512113296384543285457904501894219839172362746983455608888511143514280n,
                y: 8512084909142200563147872278416750115615933854210009415948718984529918981256n,
            },
            y: {
                x: 18771319806395900136104940800217456215711152347417610941939990665241434773126n,
                y: 4764421761998627752372380655783422789779362843583871101845383224876291890175n,
            },
            z: {
                x: 3995000773950506344873236572189495203647868219737571731638966400183469573956n,
                y: 9621028561322443025663272421164238646051544770536972162738541094222212125285n,
            },
            t: {
                x: 13902664789673748830613229337202326996252235419170081401165453715888003609279n,
                y: 11273404159242079516071060158793336315120192581113643196730916451133275505597n,
            },
        }
        const p: TwistPoint = {
            x: {
                x: 20271135668423223126412360716978265113646575146532864729169023916170636433173n,
                y: 2136404813986482669375393581566851012077700366457209905200674363127826743917n,
            },
            y: {
                x: 16481345993828441791964265986700885798711133922517859967660229559632198925029n,
                y: 12855212330511903971245652552942658425258159055646433492337108817482806837015n,
            },
            z: {
                x: 0n,
                y: 1n,
            },
            t: {
                x: 0n,
                y: 1n,
            },
        }
        const q: CurvePoint = {
            x: 463628512449771363818473213456393207897871438150642769623526081392060819958n,
            y: 19965078848235866718520532318516594007053208398532775805211511606027529379637n,
            z: 1n,
            t: 1n,
        }
        const r2: FQ2 = {
            x: 19731912811568848410619384761180568163987014384545381392324347847456093340227n,
            y: 5143385025762430812568902208670654838145872257480112196879730108416958974657n,
        }
        const resrOut: TwistPoint = {
            x: {
                x: 13426093114966307496773205593724729592760318854290912286258258287044448891020n,
                y: 302675613405095070739900091881375530222687967150102026934813652226619198160n,
            },
            y: {
                x: 10209078664064712374322522367698291957519532052370394048513276693297540390166n,
                y: 14812143846391464015376967261350355762405232471244189938984044927361645422060n,
            },
            z: {
                x: 16372965608532732610311201170373952165514995088698535241939641548521088555822n,
                y: 10076791867750907425866146692943913383581039000031863446539898898758954705053n,
            },
            t: {
                x: 18195560898927245705189882481437026077591993937197646278628371958540502845558n,
                y: 16154380874168989302171192699621920937568554919751439449259313636152736454678n,
            },
        }

        const res: LineFuncRes = {
            a: {
                x: 12271365398258078719770661937579001841161491050955853641959790400990384286020n,
                y: 2331331496345871684505422938104577105073955325043670736769296463020944589319n,
            },
            b: {
                x: 7157758637588050193877896306243360046752310261527035207021910454489067177889n,
                y: 8657781686771764339600735729867892160813851273274725492262233464090311602819n,
            },
            c: {
                x: 4914178238831393870365200259503374642526587422794191153883347359993508804805n,
                y: 7216562908578981478537198920105890913203126374242304123977956545167531313319n,
            },
            rOut: resrOut,
        }

        const result = bn256pairingTest.verify((self) => {
            self.lineFuncAdd(r, p, q, r2, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass lineFuncAdd 2', () => {
        const r: TwistPoint = {
            x: {
                x: 2964063461663118605239039139785677999957423210854194955118907814700514286230n,
                y: 21616083912832434253503738566285953999387954646985790241266666310721602079136n,
            },
            y: {
                x: 16619844897564988175194275040386671989957662165151498382648729225462312718364n,
                y: 7489693950205637668287891138084651919681252929455866255769551762310782249992n,
            },
            z: {
                x: 14081912407764063164318040909833091973072080718508362756461356821131306957618n,
                y: 16629299601983799665191648407269094831178646896344534462005958076062872178733n,
            },
            t: {
                x: 21734428505297522827024358635845380854749302347221917970874868061212578401491n,
                y: 7997285901516834205447181205801467975322364230275221968530547518712077290865n,
            },
        }
        const p: TwistPoint = {
            x: {
                x: 8726345238732450332373502896736890055207081804116397950477341472832928981329n,
                y: 5071625129705976229074783648236403434784912318671327421798042830709299528344n,
            },
            y: {
                x: 12265416158322442738825720408230581570606415632763738228299295554066090848886n,
                y: 4934544933903797051542607393297384963344177285669790484676963176007473932891n,
            },
            z: {
                x: 0n,
                y: 1n,
            },
            t: {
                x: 0n,
                y: 1n,
            },
        }
        const q: CurvePoint = {
            x: 1868431783228505245260652152015144994796656418654045130523369007114711409843n,
            y: 3241571792483592338094584253000393155151363152911816906049605897207294742238n,
            z: 1n,
            t: 1n,
        }
        const r2: FQ2 = {
            x: 17485223907666437760170849554764469179330996164027171843239902630326463531711n,
            y: 5679826220350310031823013343440372229741918597260994271901962663300145879447n,
        }
        const resrOut: TwistPoint = {
            x: {
                x: 12708560894419135885719556593041130653466420115769173864485389665280997330394n,
                y: 18491141239805221236185761166078250445972654693985269936461447067103550497571n,
            },
            y: {
                x: 12439516835937888269987124565832445428600823420893698293428995446263384070073n,
                y: 2295279761517663716458304529813933249007428827828685481537755628309296990991n,
            },
            z: {
                x: 5024297279054744195685799959762436769785644129744614796022158557616202430895n,
                y: 617551987547738831305502685601953835142438732819489010686760723929537568311n,
            },
            t: {
                x: 406696749385936328203363662870740969582410546941217084282881332127532553305n,
                y: 21067969516269962284925387923440538776829034433515056417633184701945965043877n,
            },
        }

        const res: LineFuncRes = {
            a: {
                x: 8775129663210193118337966578320776701519610361685979697802896817023889212719n,
                y: 11924250843280597830709331100202861069865902977799716569448453134771094156819n,
            },
            b: {
                x: 3106284643545043591483860348413861765288541377316401971760259622572369579789n,
                y: 18172540003681380544548819082405767966369733616292836539591011991792044066033n,
            },
            c: {
                x: 3573837699226199390966892404180621288530878785662498122922652037817408467542n,
                y: 15099018289909446183248013621237222605080727720123442922213936715933962796017n,
            },
            rOut: resrOut,
        }

        const result = bn256pairingTest.verify((self) => {
            self.lineFuncAdd(r, p, q, r2, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass lineFuncDouble', () => {
        const r: TwistPoint = {
            x: {
                x: 3726654600306440508723864471936071410306182993641798274117129225486267348596n,
                y: 263988285358259595560480062359121375826028927531542409297411395083925705761n,
            },
            y: {
                x: 1585091424896381903111487473844829994436379224137824876863437443718623926219n,
                y: 11374178192226756406251569067604448367466209205074767834597495738175604474901n,
            },
            z: {
                x: 13011442883536905616001798999108225232676946361048097411047377151910057482720n,
                y: 3933504663691922855046579124076237213229528787697326021801553053842789535933n,
            },
            t: {
                x: 17370864767867924314807495115382658627851096128606844183328094228465124737219n,
                y: 14127908214567173050652771857036203035374754855904417207519128906367843929598n,
            },
        }
        const q: CurvePoint = {
            x: 463628512449771363818473213456393207897871438150642769623526081392060819958n,
            y: 19965078848235866718520532318516594007053208398532775805211511606027529379637n,
            z: 1n,
            t: 1n,
        }
        const resrOut: TwistPoint = {
            x: {
                x: 17356672512113296384543285457904501894219839172362746983455608888511143514280n,
                y: 8512084909142200563147872278416750115615933854210009415948718984529918981256n,
            },
            y: {
                x: 18771319806395900136104940800217456215711152347417610941939990665241434773126n,
                y: 4764421761998627752372380655783422789779362843583871101845383224876291890175n,
            },
            z: {
                x: 3995000773950506344873236572189495203647868219737571731638966400183469573956n,
                y: 9621028561322443025663272421164238646051544770536972162738541094222212125285n,
            },
            t: {
                x: 13902664789673748830613229337202326996252235419170081401165453715888003609279n,
                y: 11273404159242079516071060158793336315120192581113643196730916451133275505597n,
            },
        }

        const res: LineFuncRes = {
            a: {
                x: 12536328066027552005126167531120337079386005180146028282982044533785040544279n,
                y: 8491365236239616853648786985077141296992367999209366396592660971567713106835n,
            },
            b: {
                x: 8524660919930214296380084957766796509851421672169339819152105250585026827515n,
                y: 3190738331103488223490282952476725752852373140743321591196804667935366766651n,
            },
            c: {
                x: 21783987564849150002833254243139062811400936046305531246131884403755269773457n,
                y: 2453573804225967774005923570991608240993295864580902200764735155298649174460n,
            },
            rOut: resrOut,
        }

        const result = bn256pairingTest.verify((self) => {
            self.lineFuncDouble(r, q, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass lineFuncDouble 2', () => {
        const r: TwistPoint = {
            x: {
                x: 10461346870822114392543302486571794291748296083759323178570349955941241161732n,
                y: 5361015924923132557152224103689375221848475437343297508551525692126424992853n,
            },
            y: {
                x: 2624981222850047217208231412947901252852378767821222593951813902156228180535n,
                y: 2144911435953111747880463750889674499122200680276539920551226913517140313344n,
            },
            z: {
                x: 16000626204897113472180359975727692394358357970939448396655005646964066020936n,
                y: 9276298365027406232678866044227161143626990261802874745927026416827552543478n,
            },
            t: {
                x: 15519199631257374734515827444307764305811532052808404068183149002168045269068n,
                y: 10042904613504091376422454037787367868720761226912200435198579901611327207416n,
            },
        }
        const q: CurvePoint = {
            x: 21246816689206995171803876089122389863223996398911963776752029829189984267784n,
            y: 1900716955090325131175428361144819226438630672531845530526879310162691167505n,
            z: 1n,
            t: 1n,
        }
        const resrOut: TwistPoint = {
            x: {
                x: 74846168363197807856195693004610680315866246680052737732266016459951419393n,
                y: 17932632864774266024473463739859503555882047452091006066780771745859385924200n,
            },
            y: {
                x: 6768687288039422021053139016622562238066135979162614128237548149961930386341n,
                y: 2201837577825473504899171594425263375624020612235507176637274626609209791031n,
            },
            z: {
                x: 7103787141065475375733650943328397551360168263313364118072161668834621922086n,
                y: 8544467712340164207067322609159538735498927484195197692725809195634073152628n,
            },
            t: {
                x: 13488580816143226228623065831020212853321551313768872803119673099904144491627n,
                y: 1387753764833032628584206299186006449564439424717591659020748596298778378377n,
            },
        }

        const res: LineFuncRes = {
            a: {
                x: 15956186420738353287458547670142542820400891466546610107343794297482264489223n,
                y: 8685933960094037503097465461331761571590098427192277270615022594412782307468n,
            },
            b: {
                x: 5177267974632305017757230728978217138896738797524780059252058996275268778790n,
                y: 20526797578643334719402150326788624887529155020062647134147858234141439686393n,
            },
            c: {
                x: 21421090060665533673047667687929959291277938737603895193587784353421573038121n,
                y: 11110172954143815312591625619535041310191142558802617095708807714870043588666n,
            },
            rOut: resrOut,
        }

        const result = bn256pairingTest.verify((self) => {
            self.lineFuncDouble(r, q, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass mulLine', () => {
        const ret: FQ12 = {
            x: {
                x: {
                    x: 16705698845529349369965990215804535863450577663694487343831568549624590119534n,
                    y: 10983317107935165151451463406577308747660885497392341650097592664799513083821n,
                },
                y: {
                    x: 13408632600176460745346287887388848884912664428940910535064998663331853844552n,
                    y: 2755948904378418507300201137343510131081319878647790317992652814941206695043n,
                },
                z: {
                    x: 5883169130916701157515934926791169848389485272967648570819613482734064075898n,
                    y: 15058992879562844763951286870282048813215075935607730151716153290893363538610n,
                },
            },
            y: {
                x: {
                    x: 15918073777047661207875764918794090730090052945227695505221646794415488842521n,
                    y: 5919481171057250048085090456176767646375510659512360558194826929977900221802n,
                },
                y: {
                    x: 12679958892542901139140646342783950193316238171219606632181930485566566236039n,
                    y: 14913287401225463762111709787855946601963099305792546375219261476196080349310n,
                },
                z: {
                    x: 5982502528100019055195168783399318864547850966029643816373275243250769281539n,
                    y: 4687916886264017716366959881028986781686777855739939160367444737357699749474n,
                },
            },
        }
        const a: FQ2 = {
            x: 6281767889353732398430942792727290460721639391375397724082473050232833920313n,
            y: 7334186477796712943632848240033443970143467881167812749715168537565873171651n,
        }
        const b: FQ2 = {
            x: 8811026229698182070218589182330456902584550177971160720845597852902202605641n,
            y: 7363013257528996485238064678441029660076260361688794499432189242810030166887n,
        }
        const c: FQ2 = {
            x: 1733235047862637747305085379315539539814435128010513994164341060512436550362n,
            y: 9341020193916548208399629546728811435869242934519402439754859303406382042597n,
        }
        const res: FQ12 = {
            x: {
                x: {
                    x: 20460363145346070517127312873514507604150584403009477942247950867983749198749n,
                    y: 7246392119093319594837672347455009581691059346007002948773243385716853338760n,
                },
                y: {
                    x: 15637140850835834796054247820047688350471452551769978028342424774216196846853n,
                    y: 15946371572230625821611045088141761586633666856538554711564247790044082611215n,
                },
                z: {
                    x: 8779446957752760839311813347310476653279717229277816669951488544264171593655n,
                    y: 26057174439335813727912442868057422811905179250725546579136625923080563748n,
                },
            },
            y: {
                x: {
                    x: 5012166275713003878924344380821071827451967398138993900620938915810798860662n,
                    y: 8553365043592935793197146042810930342767223889543875019738252869007725776114n,
                },
                y: {
                    x: 8570315455640172890483280960721910222552234502499315516599263595149521355505n,
                    y: 12655402692824962678190650540550180503159131673017751277943749078936910979276n,
                },
                z: {
                    x: 17303219910225919590936915339791953681749103286085401538634790177885209513033n,
                    y: 6920814153386728425423050764831845605319488868191170053304215796547783221622n,
                },
            },
        }

        const result = bn256pairingTest.verify((self) => {
            self.mulLine(ret, a, b, c, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass miller', () => {
        const a: TwistPoint = {
            x: {
                x: 21803299162587159093130539135145572807795477038447859432540751666484243307378n,
                y: 14160860808659624249791923184273513169703174217701411061287126131901744717498n,
            },
            y: {
                x: 12348842028229527927984596899602338811809816732921741315631576031212187963091n,
                y: 17310412403653152045013908897709123660398369538993156495992160294826644645233n,
            },
            z: {
                x: 20774818994662033435979198413857540484448616573599419839855281583195546892327n,
                y: 535529033384374083048290923006644333452078437126654646357241140108514831052n,
            },
            t: {
                x: 0n,
                y: 0n,
            },
        }
        const b: CurvePoint = {
            x: 2333184292428927087771700485489758868921730598636930561975550116391534740716n,
            y: -10665308796538572867807988099730397881935956205588768161121403890213807465287n,
            z: 19942748660628960002070112392871731071414068948365394782649233657941485581582n,
            t: 0n,
        }
        const res: FQ12 = {
            x: {
                x: {
                    x: 14962835205872366177243303715412174615928319640527684327288092600377314698479n,
                    y: 13053160179047214441161102196718012592306598377255704985320022984450443240424n,
                },
                y: {
                    x: 17976666639103769148053313359216449326222834797036810291649522676766185305117n,
                    y: 17556461863519454321890891689079206365542626354205850623929304839648067677446n,
                },
                z: {
                    x: 8557273973438766755574800374960734314125209020129711143871288505285593948046n,
                    y: 11870881657204666760384178774555968656703647448881802143343279703807135369369n,
                },
            },
            y: {
                x: {
                    x: 4376910846963184077282690217536896033179272864181174761669538584076501005955n,
                    y: 19801795622760228036081858860520012544262308357198218368118592156333477273208n,
                },
                y: {
                    x: 2708894691794165897443803342906835035922995079177728406978081667127781774896n,
                    y: 13957164419927418036909819903511270014096753416376013886015409756906680780677n,
                },
                z: {
                    x: 19524684583522101505367990112110717795508122200685204049114272513711759267381n,
                    y: 10605965299681107618517234941853154316172287713149537511816604407438960875265n,
                },
            },
        }

        const result = bn256pairingTest.verify((self) => {
            self.miller(a, b, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass miller', () => {
        const a: TwistPoint = {
            x: {
                x: 16575535397021734058400751805606486840675142254417050072412708765563382852170n,
                y: 18241489283176710260536446715771248897499665527770951559771899753000008526305n,
            },
            y: {
                x: 4609725656585619671100575004582990717861227630719731184063435740881646800993n,
                y: 5572834719077780741886206659237402332988248916311425149496097793117335930774n,
            },
            z: {
                x: 12776829423370144387186189495958107403899384259647835150978287505116722176180n,
                y: 10059182980606966480146806920467361585550580200724763748881924364631987852909n,
            },
            t: {
                x: 0n,
                y: 0n,
            },
        }
        const b: CurvePoint = {
            x: 33345474618696330267041619131926462027079368162107860754527692517587548787096n,
            y: -40190509674653789145251084126210638216351697261946399615722432183948993842409n,
            z: 7094016018434580152088066260414108161291482856948536310042223778182419356932n,
            t: 0n,
        }
        const res: FQ12 = {
            x: {
                x: {
                    x: 18042243755534462227453384734637122024888658214988821170739080008572172820979n,
                    y: 9441679844822210273531003215613936151743355786740506359445635652942040056597n,
                },
                y: {
                    x: 7029092719815508575710312940206242438519942091013173881211902292012528609675n,
                    y: 6229329626439961287447912128071972124318514201452746033226429166886506608049n,
                },
                z: {
                    x: 20557002023924754353479140763120499546754678534166543030203838129202963491892n,
                    y: 7402034433632398338470858102067822888619747881066946139615549836910863168829n,
                },
            },
            y: {
                x: {
                    x: 10492188180010422150286781354407227014164349355011183696993269584618738973067n,
                    y: 4235004714672838318143417628597397074751919491634465905670091840857678540368n,
                },
                y: {
                    x: 2762171802491930187963371623349851159781518739838984076474339047060128257830n,
                    y: 21749408224400554590165363713265992393045531314818222998688041331251021957177n,
                },
                z: {
                    x: 3306185067206948644736931500274783518029912058602528518995135316885960776531n,
                    y: 3249997118800232623263959916120342451935186969893864542552349939479614634545n,
                },
            },
        }

        const result = bn256pairingTest.verify((self) => {
            self.miller(a, b, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass finalexp', () => {
        const a: FQ12 = {
            x: {
                x: {
                    x: 14962835205872366177243303715412174615928319640527684327288092600377314698479n,
                    y: 13053160179047214441161102196718012592306598377255704985320022984450443240424n,
                },
                y: {
                    x: 17976666639103769148053313359216449326222834797036810291649522676766185305117n,
                    y: 17556461863519454321890891689079206365542626354205850623929304839648067677446n,
                },
                z: {
                    x: 8557273973438766755574800374960734314125209020129711143871288505285593948046n,
                    y: 11870881657204666760384178774555968656703647448881802143343279703807135369369n,
                },
            },
            y: {
                x: {
                    x: 4376910846963184077282690217536896033179272864181174761669538584076501005955n,
                    y: 19801795622760228036081858860520012544262308357198218368118592156333477273208n,
                },
                y: {
                    x: 2708894691794165897443803342906835035922995079177728406978081667127781774896n,
                    y: 13957164419927418036909819903511270014096753416376013886015409756906680780677n,
                },
                z: {
                    x: 19524684583522101505367990112110717795508122200685204049114272513711759267381n,
                    y: 10605965299681107618517234941853154316172287713149537511816604407438960875265n,
                },
            },
        }
        const res: FQ12 = {
            x: {
                x: {
                    x: 17075198402062398754647179104404198653630356464599637380511275876362764468381n,
                    y: 9715151451825460808318134594608924103285983618329763995065231938123320416000n,
                },
                y: {
                    x: 15468522233046009395451473610572706028800199523064485593787738758509311775957n,
                    y: 17535466997703952594650815424817067091957516551944689321445767077921922004115n,
                },
                z: {
                    x: 16779478972100082883086592404064725060824867888570533630682139454252384450899n,
                    y: 2496385199063086113870055468090766021915392918115963496649954820481332307911n,
                },
            },
            y: {
                x: {
                    x: 5592227222484399620575782327872160579791033149854215755050249495627262383148n,
                    y: 15986256786658692218255443167662703785175160367372273584491907364308393385848n,
                },
                y: {
                    x: 14487727524414101409851545543450941510688096102317845718367471058221872447885n,
                    y: 14073704814126788369871851508257373791868552578414295628585883023776785335744n,
                },
                z: {
                    x: 7841583550759460826236453224858083902090472445711822315688810931139838218811n,
                    y: 18765871134755277310769850952514865882108884679694748152311582625799844523217n,
                },
            },
        }

        const result = bn256pairingTest.verify((self) => {
            self.finalExp(a, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass finalexp 2', () => {
        const a: FQ12 = {
            x: {
                x: {
                    x: 2540999971343857270109703863942610847766500824549454493019168354521561148539n,
                    y: 14390900888851187592522928828981353150060809119087816715065859570911924623869n,
                },
                y: {
                    x: 4528783849075016834718020275272991186873015030173686849852042355117496870392n,
                    y: 3782680260293444887219084820913416111143459766083115231666991996670451491312n,
                },
                z: {
                    x: 20399766950890421731632768611090015287567059736773124547129722164012955593178n,
                    y: 10844723167205610029299882364490096154994716451059036349137340786247524265347n,
                },
            },
            y: {
                x: {
                    x: 15319112924515644527407212972433607617522214256956957568766084872075045093782n,
                    y: 17546221963252096446897917447728428014040963776574270855633509046660057044403n,
                },
                y: {
                    x: 7362054162147428913269260162178110559544975855738526870440073874866790371851n,
                    y: 12400376903326881503182390848714400098423339095287797449916832592639356601100n,
                },
                z: {
                    x: 2340189255985516143316692622123073079612920470096039346805034494139764052947n,
                    y: 6998709974471222642597886567423326083951141143833865240345422597918244160745n,
                },
            },
        }
        const res: FQ12 = {
            x: {
                x: {
                    x: 19858796316560752015712147023448218447750288031126660929799631422925766267410n,
                    y: 19024433880037101207395310488208745347831329887626530711316646414909673360718n,
                },
                y: {
                    x: 10669017809807683478167570848704216249063935719984712954593480656262346071267n,
                    y: 15934471175611867774218006338547893425528792771483042409475921812517964249356n,
                },
                z: {
                    x: 12921131345833231792755896113884806781417939904587291488190711655856730868330n,
                    y: 3107431041403199402353742299341338300779523189068604031465579234282789111098n,
                },
            },
            y: {
                x: {
                    x: 12240152119532699334204408670441760856218576017482830886294253989042058492283n,
                    y: 1833166643330075279516856480311773788441002133177767937119093349260386565553n,
                },
                y: {
                    x: 1653480084967475120888300029491871880810579134535619186991170931686030632205n,
                    y: 21342487225493377330772737177971406716712881458659491313169154098985945134856n,
                },
                z: {
                    x: 5641774903287013850639605661106966027143417411833057029573239181057501656036n,
                    y: 6405645177530736568532280614813015480988262580516736042450592185758464834958n,
                },
            },
        }

        const result = bn256pairingTest.verify((self) => {
            self.finalExp(a, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass finalexp 3', () => {
        const a: FQ12 = {
            x: {
                x: {
                    x: 11647533244742368195157167731710407698397732397180465451533602109571164598698n,
                    y: 18036808862123621040168868693787750633027151403117012852685560793795504482631n,
                },
                y: {
                    x: 12530315675614975948536736392381729941149456871007267818484760095738943808056n,
                    y: 14118842305286724549307361899134308731856541115757525193601678917810083020643n,
                },
                z: {
                    x: 7928669921415914748861245675716828165724505326511129099849439969132464413417n,
                    y: 18287689397829631781679804098878851453858268190234114727596633362388576068937n,
                },
            },
            y: {
                x: {
                    x: 3865468188904448634391980023617542206425561428853569882802553061949506377813n,
                    y: 10390398201789946032408744123396369398518332091790207241420379962763873022751n,
                },
                y: {
                    x: 13270096508150629962068086804543670950880264333776367898192382838436745573215n,
                    y: 15573570404371978793997995278330379859831113051172116322619949158809722880991n,
                },
                z: {
                    x: 1166390165872723119536254951277590495838587547219817512303379595959612096999n,
                    y: 7994660300343751294752615515535250770472457619067683821428937960511776256173n,
                },
            },
        }
        const res: FQ12 = {
            x: {
                x: {
                    x: 0n,
                    y: 0n,
                },
                y: {
                    x: 0n,
                    y: 0n,
                },
                z: {
                    x: 0n,
                    y: 0n,
                },
            },
            y: {
                x: {
                    x: 0n,
                    y: 0n,
                },
                y: {
                    x: 0n,
                    y: 0n,
                },
                z: {
                    x: 0n,
                    y: 1n,
                },
            },
        }

        const result = bn256pairingTest.verify((self) => {
            self.finalExp(a, res)
        })
        expect(result.success, result.error).to.be.true
    })

    it('should pass pair', () => {
        const a: CurvePoint = {
            x: -8720069638061794217968529126055936449902114921560611615611381483821408826692n,
            y: -18912755695975291746664503181602077032107562916759789179050974006791745199857n,
            z: 23517922633606779232190991756606092674456626531975881054656119865571129132980n,
            t: 0n,
        }
        const b: TwistPoint = {
            x: {
                x: 5314228127198490104019317881313365855248917248989853968067148580419148623083n,
                y: 11912946847896124945287797851970453390230337366383106120011779754462265792211n,
            },
            y: {
                x: 6075118316430525700724907339960581026456115753778285086061072665555578958273n,
                y: 17921058939405364657065252894249868192785774521782375921023432131520670323596n,
            },
            z: {
                x: 150075629734417496122261897611665577456436948593129946300765332535506016897n,
                y: 14110989815468370076753453892438872117374667829748298679814173601864507731517n,
            },
            t: {
                x: 0n,
                y: 1n,
            },
        }
        const res: FQ12 = {
            x: {
                x: {
                    x: 10161034723525481084397460609150908308123119744573328163466154259870625864114n,
                    y: 18119856492665977260478490449845902506963508424650183864542925087580463068986n,
                },
                y: {
                    x: 2408121175746393088311068388736113202090614874773021983558811232946869135283n,
                    y: 5433017055260167884764234617451794879448329529270960105413025985254180382735n,
                },
                z: {
                    x: 17687434070390410688836694584247391202596794863977156113545880469025498570607n,
                    y: 7335603324852025636017736824582430433807066083499523042060143598817073017969n,
                },
            },
            y: {
                x: {
                    x: 18398489731515906504811660315440899091459990063709142414863684869031866910676n,
                    y: 11676973173575609704410195576917037650851074681208571375471551268503004042481n,
                },
                y: {
                    x: 6416295541452975656216094743457282640918580226882722787897486152003908722382n,
                    y: 11444460718323914827885562808188462124633054466479741649210509732597990674637n,
                },
                z: {
                    x: 3742081675296694725630764026729216128061097510946288657047288386549204441680n,
                    y: 7936724437570245828588093285972138715025600848255859058641125550272206539787n,
                },
            },
        }

        const result = bn256pairingTest.verify((self) => {
            self.pair(a, b, res)
        })
        expect(result.success, result.error).to.be.true
    })
})
